{"version":3,"file":"inner-svg.js","sources":["../src/utils.ts","../src/core/InnerSVG.ts","../src/core/attr-handler.ts","../src/index.ts","../src/core/observer.ts"],"sourcesContent":["import { InjectedElements } from \"core/InnerSVG\";\r\n\r\n/**\r\n * Find an injected elements index to resolve his class\r\n * @param element\r\n * @returns\r\n */\r\nfunction findInjectedElementIndex(element: Node | HTMLElement) {\r\n  return InjectedElements.findIndex((e) => e.element === element);\r\n}\r\n\r\nexport { findInjectedElementIndex };\r\n","import { findInjectedElementIndex } from \"utils\";\r\n\r\nconst InjectedElements: { element: HTMLElement; instance: InjectSVG }[] = [];\r\n\r\nclass InjectSVG {\r\n  public svg: SVGElement;\r\n\r\n  constructor(public element: HTMLElement, public path: string) {\r\n    InjectedElements.push({ element, instance: this });\r\n    this.path = this.initPath(path);\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Inject the svg\r\n   */\r\n  private async init() {\r\n    if (this.svg) this.svg.remove();\r\n    await this.loadSVG();\r\n    this.setSameAttributes();\r\n    this.element.style.display = \"none\";\r\n    this.element.parentNode.insertBefore(this.svg, this.element);\r\n  }\r\n\r\n  /**\r\n   * Laod the svg\r\n   */\r\n  private async loadSVG() {\r\n    const req = await fetch(this.path);\r\n    const svgText = await req.text();\r\n    this.svg = this.initSVG(svgText);\r\n  }\r\n\r\n  /**\r\n   * Create the svg element\r\n   * @param svgText\r\n   * @returns\r\n   */\r\n  private initSVG(svgText: string): SVGElement {\r\n    const temp = document.createElement(\"div\");\r\n    temp.innerHTML = svgText;\r\n    for (const child of temp.childNodes) {\r\n      if (child instanceof SVGElement) return child;\r\n    }\r\n    this.destruct();\r\n    throw new Error(this.path + \" is not a valid SVG\");\r\n  }\r\n\r\n  /**\r\n   * Set the same attributes to the svg from the element\r\n   */\r\n  private setSameAttributes() {\r\n    for (const attr of this.element.attributes) {\r\n      if (attr.name === \"data-i-svg\" || attr.name === \"id\") continue;\r\n      this.svg.setAttribute(attr.name, attr.value);\r\n    }\r\n    if (this.element.style.display === \"none\") this.svg.style.display = \"\";\r\n  }\r\n\r\n  /**\r\n   * Init the path of the svg\r\n   * @param path\r\n   * @returns\r\n   */\r\n  private initPath(path: string) {\r\n    const splittedPath = document.location.pathname.split(\"/\");\r\n    if (splittedPath[splittedPath.length - 1]?.includes(\".\"))\r\n      splittedPath.pop();\r\n    const absolutePath = splittedPath.join(\"/\");\r\n    return path.startsWith(\"/\") ? path : absolutePath + \"/\" + path;\r\n  }\r\n\r\n  /**\r\n   * Update the svg path\r\n   * @param path\r\n   */\r\n  public updatePath(path: string) {\r\n    this.path = this.initPath(path);\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Remove the svg\r\n   */\r\n  public destruct() {\r\n    const injectedIndex = findInjectedElementIndex(this.element);\r\n    this.element.removeAttribute(\"data-i-svg\");\r\n    this.element.style.display = \"\";\r\n    this.svg.remove();\r\n    InjectedElements.splice(injectedIndex, 1);\r\n  }\r\n}\r\n\r\nexport { InjectSVG, InjectedElements };\r\n","import { findInjectedElementIndex } from \"utils\";\r\nimport { InjectSVG } from \"./InnerSVG\";\r\n\r\n/**\r\n * Handle attribute data-i-svg\r\n * @param elements\r\n */\r\nfunction AttributesHandler(elements: HTMLElement[] | NodeListOf<HTMLElement>) {\r\n  for (const element of elements) {\r\n    const alreadySetup = findInjectedElementIndex(element) !== -1;\r\n    const dontNeedInjection = element.dataset?.iSvg === undefined;\r\n\r\n    if (alreadySetup || dontNeedInjection) continue;\r\n\r\n    new InjectSVG(element, element.dataset.iSvg);\r\n  }\r\n}\r\n\r\nexport default AttributesHandler;\r\n","import { InjectSVG } from \"core/InnerSVG\";\r\nimport AttributesHandler from \"core/attr-handler\";\r\nimport initObserver from \"core/observer\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  AttributesHandler(document.querySelectorAll(\"[data-i-svg]\"));\r\n  initObserver();\r\n});\r\n\r\n/**\r\n * Inject an svg into the dom\r\n * @param element\r\n * @param path\r\n * @returns\r\n */\r\nfunction innerSVG(element: HTMLElement, path: string) {\r\n  return new InjectSVG(element, path);\r\n}\r\n\r\nexport default innerSVG;\r\n","import { findInjectedElementIndex } from \"utils\";\r\nimport { InjectedElements } from \"./InnerSVG\";\r\nimport AttributesHandler from \"./attr-handler\";\r\n\r\n/**\r\n * Init an observer to see any change of the data-i-svg attribute\r\n */\r\nfunction initObserver() {\r\n  const observerDOM = new MutationObserver(function (mutations) {\r\n    const addedNodes: HTMLElement[] = [];\r\n\r\n    for (const mutation of mutations ?? []) {\r\n      //attributes changed\r\n      if (mutation.type === \"attributes\") {\r\n        const element = mutation.target as HTMLElement;\r\n        const injectedIndex = findInjectedElementIndex(element);\r\n\r\n        const isNewInjection = injectedIndex === -1;\r\n\r\n        if (isNewInjection) {\r\n          addedNodes.push(element);\r\n        } else {\r\n          const path = element.dataset.iSvg;\r\n          InjectedElements[injectedIndex].instance.updatePath(path);\r\n        }\r\n      }\r\n\r\n      //added nodes\r\n      for (const addedNode of mutation.addedNodes) {\r\n        addedNodes.push(addedNode as HTMLElement);\r\n      }\r\n\r\n      //removed nodes\r\n      for (const removedNode of mutation.removedNodes) {\r\n        const injectedIndex = findInjectedElementIndex(removedNode);\r\n        if (injectedIndex !== -1)\r\n          InjectedElements[injectedIndex].instance.destruct();\r\n      }\r\n    }\r\n\r\n    if (addedNodes.length > 0) AttributesHandler(addedNodes);\r\n  });\r\n\r\n  observerDOM.observe(document.body, {\r\n    childList: true,\r\n    subtree: true,\r\n    attributes: true,\r\n  });\r\n}\r\n\r\nexport default initObserver;\r\n"],"names":["findInjectedElementIndex","element","InjectedElements","findIndex","e","InjectSVG","constructor","path","this","push","instance","initPath","init","svg","remove","loadSVG","setSameAttributes","style","display","parentNode","insertBefore","req","fetch","svgText","text","initSVG","temp","document","createElement","innerHTML","child","childNodes","SVGElement","destruct","Error","attr","attributes","name","setAttribute","value","splittedPath","location","pathname","split","_a","length","includes","pop","absolutePath","join","startsWith","updatePath","injectedIndex","removeAttribute","splice","AttributesHandler","elements","alreadySetup","dontNeedInjection","undefined","dataset","iSvg","addEventListener","querySelectorAll","MutationObserver","mutations","addedNodes","mutation","type","target","addedNode","removedNode","removedNodes","observe","body","childList","subtree"],"mappings":"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"}